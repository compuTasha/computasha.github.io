{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"c873dc3e-98fc-53d6-b57c-4ee61f35ec45","excerpt":"코세라 Kotlin for Java Developers 강의에 등장한 문제 Q. 3번째 예시가 왜 true일까..  A. 사전 순으로 Java랑 Scala 사이에 있어서 true (..) operator는 range를 다룰 수 있는 가장 간단한 방법이다. 시작과 끝 값을 모두 포함하는 범위를 만든다. rangeTo() 함수의 operator form 이고, (..) 연산자를 사용하여 문자뿐만 아니라 정수에 대한 범위를 만들 수 있다. Q. 그럼 한글도 될까요? A. 됩니다!  + 헷갈리지 맙시다","frontmatter":{"categories":"Android","title":".. operator - Kotlin","date":"February 05, 2022"},"fields":{"slug":"/AD-in/"}}},{"node":{"id":"fadc4ab2-b764-5132-9480-0cf3ed2febde","excerpt":"📃 애플 개발자 아카데미 지원 후기 포스텍- Apple 개발자 아카데미 (Apple Developer Academy @ POSTECH)에 지원했다. 작년 5월부터 한국에도 생긴다고 소식이 들려오더니 결국 포스텍에 들어섰다. iOS를 부트캠프를 통해 더 배우고 싶어서 야곰님의 커리어 스타트 캠프, 코드스쿼드 등을 찾아보고 있었는데.. 무려 애플이 만드는 부트캠프라니..! 이건 무조건 도전해야겠다 싶었다. (심지어 다른 곳은 내가 돈을 내고 수업을 듣는데, 여기는 월 100만원을 지원해준다… 갓 애플)   2022년 처음 열리는 한국 애플 개발자 아카데미는 2022년 3월 1일 기준 만 19세 이상이면 모두 지원 가능하다. 서류는 2021년 12월 31일까지 접수 가능했고, 12월 한달동안 5번 정도 인포 세션을 가지면서 아카데미에 대한 정보를 얻을 수 있었다. (초반 인포 세션에서 말씀해주신 내용과 후반의 내용이 달라지는 걸로 봐서는 계속해서 커리큘럼을 수정하고 발전해나가는 과정인 …","frontmatter":{"categories":"etc.","title":"Apple Developer Academy @ POSTECH 지원 후기","date":"February 04, 2022"},"fields":{"slug":"/etc-apple-developer-academy/"}}},{"node":{"id":"b7fceb7a-6f09-5ac0-906d-623828b066bf","excerpt":"코세라 Kotlin for Java Developers 강의에 등장한 문제 다음 보기 4개 중에서 컴파일되지 않는 것은? : 1번, 4번   변수 f1은 반환 타입을 묻는데 null을 대입하고 있고, 변수 f4는 반환 값을 대입해야 하는데 반환 타입을 알려줌 (??) f3은 함수 대신 null로 초기화되어있기 때문에 나중에 함수 내에서 람다식을 저장하여 사용 💡 (파라미터) → 반환값  : 함수 표현식 [Kotlin] 코틀린 고차 함수 [Kotlin 강좌] 21. 고차 함수와 람다의 활용 : 네이버 블로그 (naver.com)","frontmatter":{"categories":"Android","title":"()→Int? 와 (()→Int)? 차이점 - Kotlin","date":"February 03, 2022"},"fields":{"slug":"/AD-nullable-difference-K/"}}},{"node":{"id":"e012ff9c-2c80-5260-9620-0d72116527d6","excerpt":"1️⃣ Call by Value (값에 의한 호출)  2️⃣ Call by Name (이름에 의한 호출)  → 그래서 이걸 어디에 쓰나요?? (예시) 리소스도 많이 들고 시간도 오래 걸리는 복잡한 연산을 하는 메소드 A가 있다. 이 메소드 A는 특정 조건이 true인 경우에 쓰이는 메소드이다. 이 메소드 A를 앞서 살펴본 1️⃣ callByValue 형식으로 호출하면 조건에 상관없이 무조건 호출되는 반면에, 2️⃣ callByName으로 호출할 시, 원하는 조건일때만 실행되도록 할 수 있다. 참고 링크 : Call by Value, Call by Name - kotlin (gitbook.io)  1️⃣ Call by Value (값에 의한 호출) 2️⃣ Call by Name (이름에 의한 호출) → 그래서 이걸 어디에 쓰나요??","frontmatter":{"categories":"Android","title":"Call by Value, Call by Name - Kotlin","date":"February 02, 2022"},"fields":{"slug":"/AD-callByName-callByValue/"}}},{"node":{"id":"26b217ff-ab5b-5ad3-aee2-d9ba4bdc5d38","excerpt":"💰 1. 자본 비용을 가변 비용으로 대체 가능 자본 비용은 자산, 산업용 건물 또는 장비와 같은 실제 자산을 획득, 업그레이드 및 유지하기 위해 회사에서 사용하는 돈을 의미한다 → 이 경우 사용 여부와 관계없이 계속해서 비용이 든다 반면, 가변 비용은 클라우드 컴퓨팅을 사용하여 쉽게 변경하거나 피할 수 있는 비용을 의미한다 사용 방법이 결정되기도 전에 데이터 센터와 서버에 대규모로 투자를 하는 대신, 리소스를 사용할 때만, 그리고 사용한 만큼의 리소스에 대해서만 비용 지불 → 기술 비용 절감 또한 몇 주 또는 며칠이 아니라 몇 분 만에 온디맨드로 새로운 애플리케이션에 맞추어 필요한 만큼의 공간을 구축할 수 있다 →   이로 인해 유지 관리 부담이 적어지므로 IT 요구 사항과 비즈니스 요구 사항에 더 집중할 수 있음 👨‍👩‍👧‍👧 2. 규모의 경제로 얻어지는 혜택 수많은 고객의 사용량이 클라우드에 누적되므로 AWS와 같은 공급자는 더 높은 규모의 경제를 달성할 수 있으며 따라서 사용량에 따라 …","frontmatter":{"categories":"AWS","title":"AWS ACF 4. 클라우드 컴퓨팅의 이점","date":"January 30, 2022"},"fields":{"slug":"/AWS-ACF-4/"}}},{"node":{"id":"9b9fd21e-9bdc-52ef-ae6a-a212e184eb05","excerpt":"💫 프로그래밍 패러다임 프로그래밍 패러다임(Programming Paradigm)은 프로그래머에게 프로그래밍의 관점을 갖게 하고 코드를 어떻게 작성할지 결정하는 역할을 한다. 새로운 프로그래밍 패러다임을 통해서는 새로운 방식으로 생각하는 법을 배우게 되고, 이를 바탕으로 코드를 작성하게 된다. 명령형 프로그래밍 : 프로그래밍의 상태와 상태를 변경시키는 구문의 관점에서 연산을 설명하는 방식 절차지향 프로그래밍 : 수행되어야 할 연속적인 계산 과정을 포함하는 방식 (C, C++) 객체지향 프로그래밍 : 객체들의 집합으로 프로그램의 상호작용을 표현 (C++, Java, C#) 선언형 프로그래밍 :  어떤 방법으로 해야 하는지(How)를 나타내기보다 무엇(What)과 같은지를 설명하는 방식 함수형 프로그래밍 : 순수 함수를 조합하고 소프트웨어를 만드는 방식 (클로저, 하스켈, 리스프) 명령형 프로그래밍에서는 알고리즘을 명시하고 목표는 명시 안 함. 선언형 프로그래밍에서는 알고리즘은 명시하…","frontmatter":{"categories":"CS","title":"프로그래밍 패러다임과 함수형 프로그래밍","date":"January 29, 2022"},"fields":{"slug":"/CS-functional-programming/"}}},{"node":{"id":"3e566794-78f0-55b9-9486-893f6ffadf2c","excerpt":"👨🏻‍🏫 오늘 세미나는 AUSG 5기 참여자 배진수님, 김민태님, 황성찬님, 우수연님이 진행해주셨습니다. 기억에 남는 이야기 내 행동, 경험에 대해 5F 회고가 필요하다. Fact (사실) Feeling (느낌) Finding (교훈) Future action (향후 행동) Feedback (피드백) 그중에서도 피드백이 가장 중요하다고 말씀하셨다. → 매번 느끼지만 단순히 경험만으로 쌓이는 경험치는 많지 않다. 경험을 통해 교훈을 얻고 과정,결과를 피드백하면서 많이 성장하는 것 같다. 내가 잘하고 있는지 체크하기 위한 항목 테스트코드 코드리뷰 발표 블로그 커뮤니티 참여 → 나는 테스트코드와 특히 코드리뷰에서 부족한 점이 많다. 혼자서 하는 코드리뷰보다 다양한 부트캠프나 커뮤니티에 참여해서 다른 사람들과 코드 리뷰를 주고받고 싶다. 소프트스킬 : 커뮤니케이션 능력, 유연성, 팀워크, 문제해결능력, 시간관리 최고의 복지는 최고의 동료다. 자율과 책임을 가지고 성숙한 조직 문화 만들기 → 해…","frontmatter":{"categories":"AWS","title":"[TIL] AWS 직무 관련 세미나","date":"January 25, 2022"},"fields":{"slug":"/AWS-seminar/"}}},{"node":{"id":"0a0a83b8-4465-5345-be73-774f5a5d274f","excerpt":"디자인 패턴은 특정한 상황에서 반복적으로 일어나는 일반적인 문제를 해결하기 위한 일종의 템플릿이다. 디자인 패턴을 잘 활용하면, 앱의 코드를 모듈화할 수 있고  버그 수정과 변경이 더 쉬워진다. 그중에서도 오늘 살펴볼 디자인 패턴은 MVC 패턴이다. (오리지널 MVC 패턴이 아닌 애플이 발표한 Cocoa MVC 패턴..! = 요즘 말하는 MVC 패턴) 🤳🏻 Model-View-Controller (MVC) 현재 Cocoa Touch 개발에서 가장 많이 사용되는 디자인 패턴이다. 이 디자인 패턴은 앱 내의 모든 오브젝트가 Model, View, Controller 중 하나의 역할을 맡아 수행하도록 한다. 그리고 이렇게 같은 역할을 하는 오브젝트들을 모아서 레이어라고 부른다. 👪 MVC 레이어의 역할과 관계 우선 각 레이어의 역할을 살펴보자 다음은 레이어 간의 상호 작용을 보여주는 다이어그램이다.  MVC 디자인 패턴은 코드를 Model, View, Controller 중 하나로 구분한…","frontmatter":{"categories":"iOS","title":"MVC 디자인 패턴","date":"January 24, 2022"},"fields":{"slug":"/iOS-MVC/"}}},{"node":{"id":"e598ddf0-4ef0-5a4a-8127-a2302f83ad0c","excerpt":"CPU 코어 CPU = centeral Processing Unit, 중앙 처리 장치 코어 = 물리적인 CPU의 프로세서를 의미 CPU 코어의 역사 싱글 코어 👤 = 한 명이 컴퓨터에서 일한다 = 한 번에 하나씩만 처리 가능 → 한 번에 여러 개 처리하기 위해서는 현재 실행 중인 프로그램 간 전환을 빨리해서 사용자로 하여금 동시에 실행하고 있는 것처럼 느끼게 함 그전에도 멀티코어의 개념은 등장했는데 개발하지 않은 이유 1980년쯤에는 싱글 코어로도 원하는 연산 수행 충분히 가능했음 여태 만들어진 코드가 싱글 코어에서 최적의 성능을 보임 (이전 프로그램은 하나의 일을 분배해서 나누는데 시간이 더 오래걸렸음) 좀 느리다 싶으면 CPU의 클럭을 올려서(=채찍질을 더 열심히 해서) 더 빨리 계산하게 만들면 감당 가능했음 → 근데 이게 2004년도쯤 오니까 CPU가 과부화 돼서 뜨거워지기 시작함 CPU burning 🔥 → 그래서 인텔이 싱글코어 손절하고 듀얼코어 👥 로 전환 (정확히 20…","frontmatter":{"categories":"CS","title":"CPU 코어와 스레드","date":"January 22, 2022"},"fields":{"slug":"/CS-cpu-core-thread/"}}},{"node":{"id":"4e7b46a6-5453-588e-a861-c0790f943e11","excerpt":"기본기 탄탄한 iOS 개발자로 성장하기 LEEO 님의 블로그와 iOS 개발 로드맵을 참고해서 만든 성장 로드맵 💻 기본 역량 자료구조 & 알고리즘 기본적인 터미널 사용법 Git - 버전 관리 SSH HTTP / HTTPs 그리고 API 검색 기술 문자열 인코딩 오픈소스 🤨 Basic Swift 기본문법 Collections ControlFlow(while, for, iterating collection, nested loop) Optional Guard Object Oriented Programing Closures enum Properties & Methods Stored Properties Computed Properties Lazy Properties Computed Properties or Methods? Inheritance Initializers Protocols & Extensions Value vs Reference Types Self Xcode IDE iOS kno…","frontmatter":{"categories":"iOS","title":"iOS 개발 로드맵 따라가기","date":"January 21, 2022"},"fields":{"slug":"/iOS-roadmap/"}}},{"node":{"id":"dac8cb43-a104-556c-8b23-cafd80fc33b6","excerpt":"제이콥의 법칙(Jakob’s Law)  💁🏻 개요 사용자는 새로운 사이트나 앱을 접했을 때, 이미 알고 있는 기존의 UX와 동일한 방식을 기대한다. 이 사실을 간과하고 디자인하면 사용자의 혼란과 불만을 초래할 수 있다. ☝️ 요점 사용자는 다른 제품들도 자신에게 익숙한 방식으로 작동하길 원한다. 익숙한 방식을 활용함으로써(기존 멘탈 모델을 활용하면) 사용자는 처음 접하는 제품이나 서비스더라도 사용법을 금세 깨우칠 수 있고, 이는 곧 뛰어난 사용자 경험으로 연결된다. 제품이나 서비스의 변화를 꾀할 때는, 사용자에게 익숙한 모델을 특정 기간 동안 사용할 수 있게 만들어서 부조화를 최소화한다. 💡 멘탈 모델(Mental model) 사물이 실제로 어떤 방식으로 작동할 것이라고 생각하는 누군가의 사고 과정에 대한 설명\n좋은 사용자 경험 -> 디자이너의 멘탈 모델 = 사용자의 멘탈 모델  제이콥의 법칙(Jakob’s Law) 💁🏻 개요 ☝️ 요점","frontmatter":{"categories":"UX/UI","title":"익숙함을 이용한 디자인, 제이콥의 법칙","date":"January 20, 2022"},"fields":{"slug":"/UX-Jacobs-Law/"}}},{"node":{"id":"910f3811-78c5-5ce5-a675-1bd4d672a7fd","excerpt":"💥 클라우드 컴퓨팅 배포 모델  각 모델은 애플리케이션을 배포할 수 있는 클라우드 환경을 나타낸다  ☁️ 퍼블릭 클라우드 (Public Cloud) 클라우드 서비스 제공 업체가 인프라를 소유하고 있고, 인터넷을 통해 일반적인 기업이나 개인에게 클라우드 인프라 서비스를 제공한다 퍼블릭 클라우드 기반 애플리케이션은 모든 구성 요소가 클라우드에 배포된다 → 애플리케이션의 모든 부분이 클라우드에서 실행된다 -> 사용자는 가상화된 컴퓨팅, 리소스에 서비스로 바로 액세스한다 다만 모두에게 개방된 서비스다 보니, 온프레미스 인프라에 비해 보안이 취약할 수 있다 퍼블릭 클라우드의 이점 : 💰비용, 💺 편리성 최소 투자 : 사용량에 따라 요금이 청구되기 때문에 선불 수수료가 없어서 리소스가 즉시 필요한 기업에 적합함 설치 비용 없음 : 클라우드 서비스 제공업체가 전체 인프라를 제공하기 때문에 하드웨어를 설치할 필요가 없음 유지 관리가 필요 없음 : 유지보수 작업은 클라우드 서비스 제공자가 수행함 인…","frontmatter":{"categories":"AWS","title":"AWS ACF 3. 클라우드 컴퓨팅 배포 모델","date":"January 19, 2022"},"fields":{"slug":"/AWS-ACF-3/"}}},{"node":{"id":"764b8f44-2b42-5938-b0c1-d9963e513922","excerpt":"🔮 Utterances 는 깃허브 이슈를 기반으로 댓글을 달 수 있게 만들어주는 깃허브 앱이다. 무료에다가 테마도 다양하고 광고도 없어서 선택했다. (Disqus 라는 것도 있던데 그건 부분 유료라서 보류…) 💡 동작 원리 Utterances가 로드되면, GitHub  issue search API 를 사용하여 ,  또는 을 기준으로 페이지와 관련된 이슈를 찾는다. 페이지와 일치하는 이슈가 없으면  utterances-bot 이 누군가 댓글을 달 때 자동으로 이슈를 만든다 ~ 💬 Utterances 사용하기 https://utteranc.es 에서 필요한 정보 4가지 정도만 입력하면 Utterances를 추가할 수 있는 코드를 만들어준다. 하나하나 과정을 살펴보자. 1. Repository 만들기 우선 https://github.com 에서 Utterances 와 연결할 repo(=Repository)가 필요하다. 모두가 이슈와 댓글을 확인할 수 있도록  으로 설정한다. repo를…","frontmatter":{"categories":"etc.","title":"Github 블로그에 댓글 기능 추가하기 - Utterances","date":"January 13, 2022"},"fields":{"slug":"/etc-utterances/"}}},{"node":{"id":"062d840e-e9a9-510b-ad0f-d842f95f22d5","excerpt":"💥 IaaS, PaaS, SaaS  각 모델은 클라우드 컴퓨팅 스택의 각기 다른 부분에 해당한다. 이를 통해 IT 리소스에 대한 다양한 수준의 제어를 제공하고 있다.  1. IaaS(서비스형 인프라) = Infrastructure as a Service 일반적으로 네트워크 기능과 서버, 가상 또는 전용 컴퓨터에 대한 액세스를 제공하고 스토리지 공간도 제공한다. IT 리소스에 대한 최고 수준의 유연성과 제어 기능을 제공한다. 현재 많은 IT 부서 및 개발자에게 익숙한 기존 구현 방식(=온프레미스 방식)과 가장 유사하다. 대표적인 예시로 AWS의 EC2(Amazon Elastic Compute Cloud)가 있다. 2. PaaS(서비스형 플랫폼) = Platform as a Service PaaS를 사용하면 기반 인프라를 관리할 필요가 없다. (하드웨어 및 운영체제와 관련된) 자동화 기능을 통해 관리되므로 프로비저닝 작업이 아니라 애플리케이션을 배포하고 관리하는 데 집중할 수 있다. …","frontmatter":{"categories":"AWS","title":"AWS ACF 2. 클라우드 컴퓨팅 서비스 모델","date":"January 12, 2022"},"fields":{"slug":"/AWS-ACF-2/"}}},{"node":{"id":"8b67762e-65ff-59e3-a764-b604086a8202","excerpt":"☁️ 정의  컴퓨팅 파워, 데이터베이스, 스토리지, 애플리케이션 및 기타 IT 리소스를 온디맨드로 인터넷을 통해 제공하고 사용한 만큼만 비용을 지불하는 것 → 서비스 공급자(ex. AWS)가 제공하는 리소스를 사용자가 필요한 만큼 가져와서 원하는 솔루션을 만들 수 있다 →  이런 리소스는 전 세계에 위치한 데이터 센터에 구축된 서버 컴퓨터에서 실행된다 💡 온디맨드(On-Demand) 요구 사항에 따라 즉시 제공/공급하는 방식, 공급이 아닌 수요가 모든 것을 결정하는 시스템 및 전략을 총칭하는 용어 🤷🏻 기존 컴퓨팅 VS 클라우드 컴퓨팅 클라우드 컴퓨팅을 사용하면 인프라를 소프트웨어로 생각하고 사용할 수 있다\n 🏢 기존 컴퓨팅 = 하드웨어 솔루션, = 온프레미스 방식 비용, 시간이 매우 많이 소요된다 기존 컴퓨팅 방식은 물리적이므로 공간, 하드웨어 자체에 대한 투자 등등 상당한 규모의 사전 투자가 필요하다. 유지·관리도 필수. 유지·관리를 위해서는 공간, 직원, 물리적 보안, 계획, 자…","frontmatter":{"categories":"AWS","title":"AWS ACF 1. 클라우드 컴퓨팅이란","date":"January 11, 2022"},"fields":{"slug":"/AWS-ACF-1/"}}},{"node":{"id":"31bd1df2-3339-5136-8b5b-f9ca94f78c79","excerpt":"나는 배운 내용을 나만의 언어로 기록하고 새기는 과정을 거쳐야 비로소 내 지식이 된다고 믿는 ‘기록광’ 이다. 그리고 그 과정에서 끊임없이 고민하고, 해결하고, 성장하는 걸 즐긴다. 그렇다고 해서 종이 세상에만 갇혀 있는 건 아니고,\n종이에 빼곡히 새겨진 지식만큼이나 새로운 경험, 커뮤니케이션을 좋아한다! 그리고 이제 Github 블로그를 매개체로 종이에 쌓인 지식을 다른 사람들과 공유하고 또 배워가고자 한다. 항상 겸손한 배움의 자세를 가지고, 제가 가진 지식을 사람들과 공유하며, 어제보다 오늘 더 나은 개발자로 성장하겠습니다. \n\n\n\n 항상 겸손한 배움의 자세를 가지고, 제가 가진 지식을 사람들과 공유하며, 어제보다 오늘 더 나은 개발자로 성장하겠습니다.","frontmatter":{"categories":"etc.","title":"다시 시작하는 Github 블로그","date":"January 09, 2022"},"fields":{"slug":"/etc-first-post/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"김미주","bio":{"role":"개발자","description":["기록을 좋아하는","하고 싶은 게 많은","이로운 것을 만드는"],"thumbnail":"profile.gif"},"social":{"github":"https://github.com/compuTasha","linkedIn":"https://www.linkedin.com/in/mijoo-kim-58b099167/","email":"mijookim.tasha@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}