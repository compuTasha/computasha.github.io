{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/iOS",
    "result": {"pageContext":{"currentCategory":"iOS","categories":["All","iOS","UX/UI","CS","Android","etc.","AWS"],"edges":[{"node":{"id":"767aea87-aeb2-5ef5-8f99-e28fcac0a81d","excerpt":"🥞 VStack child 뷰를 수직으로 정렬하는 뷰  은 화면 상에 보이던 안 보이던 child 뷰를 전부 로드한다. child 뷰 수가 적고 렌더링이 딜레이 되면 안 되는 상황에는 을 사용하자 예시 : 텍스트 뷰 10개를 포함한 VStack  애플 공식문서 : VStack 🍔 LazyVStack 화면에 보이는 부분에서만 child 뷰를 로드해서 수직으로 보여주는 뷰  말 그대로 Lazy해서 화면에 보이는 부분까지만 만들고 렌더링 해서 보여준다. child 뷰가 많아서 현재 화면에서는 안 보이는 것까지 한 번에 다 로드하면 시간이 오래 걸리는 친구들은 을 사용하는가 보다. 스크롤이 엄청 긴 스크롤 뷰에 VStack을 사용하면 한 번에 모든 뷰를 로드해야 하니까 로딩 시간이 길어지는데, LazyVStack을 사용하면 스크롤을 내릴 때 보이는 만큼만 만들면 되니까 더 빠른 것 같다.  예시 : ScrollView가 수직의 텍스트 라인들로 구성된 LazyVStack을 포함하고 있다  …","fields":{"slug":"/iOS-VStack-LazyVStack/"},"frontmatter":{"categories":"iOS","title":"VStack과 LazyVStack은 언제 사용하지? - SwiftUI","date":"April 09, 2022"}},"next":{"fields":{"slug":"/iOS-SafeArea/"}},"previous":null},{"node":{"id":"72e4c937-a0cc-552c-b2a0-36847bf88c5d","excerpt":"✅ Safe Area  \n그림에 보이는 영역이 Safe Area에 해당한다. 기본적으로 SwiftUI에서는 뷰를 Safe Area 안에만 배치한다. ↕️ ignoresSafeArea() = Safe Area 밖까지 뷰를 확장함 (Expands the view out of its safe area)   애플 공식문서 : ignoresSafeArea(_:edges:)  ✅ Safe Area ↕️ ignoresSafeArea()","fields":{"slug":"/iOS-SafeArea/"},"frontmatter":{"categories":"iOS","title":"Safe Area와 ignoresSafeArea() 이해하기 - SwiftUI","date":"April 08, 2022"}},"next":{"fields":{"slug":"/UX-Fitts-Law/"}},"previous":{"fields":{"slug":"/iOS-VStack-LazyVStack/"}}},{"node":{"id":"292d8771-556a-54a8-aac7-7f4fe369aa78","excerpt":"디자인 패턴은 특정한 상황에서 반복적으로 일어나는 일반적인 문제를 해결하기 위한 일종의 템플릿이다. 디자인 패턴을 잘 활용하면, 앱의 코드를 모듈화할 수 있고  버그 수정과 변경이 더 쉬워진다. 그중에서도 오늘 살펴볼 디자인 패턴은 MVC 패턴이다. (오리지널 MVC 패턴이 아닌 애플이 발표한 Cocoa MVC 패턴..! = 요즘 말하는 MVC 패턴) 🤳🏻 Model-View-Controller (MVC) 현재 Cocoa Touch 개발에서 가장 많이 사용되는 디자인 패턴이다. 이 디자인 패턴은 앱 내의 모든 오브젝트가 Model, View, Controller 중 하나의 역할을 맡아 수행하도록 한다. 그리고 이렇게 같은 역할을 하는 오브젝트들을 모아서 레이어라고 부른다. 👪 MVC 레이어의 역할과 관계 우선 각 레이어의 역할을 살펴보자 다음은 레이어 간의 상호 작용을 보여주는 다이어그램이다.  MVC 디자인 패턴은 코드를 Model, View, Controller 중 하나로 구분한…","fields":{"slug":"/iOS-MVC/"},"frontmatter":{"categories":"iOS","title":"MVC 디자인 패턴","date":"January 24, 2022"}},"next":{"fields":{"slug":"/CS-cpu-core-thread/"}},"previous":{"fields":{"slug":"/AWS-seminar/"}}},{"node":{"id":"2f017dc1-7dbd-5796-b836-97f78a8baf00","excerpt":"기본기 탄탄한 iOS 개발자로 성장하기 LEEO 님의 블로그와 iOS 개발 로드맵을 참고해서 만든 성장 로드맵 💻 기본 역량 자료구조 & 알고리즘 기본적인 터미널 사용법 Git - 버전 관리 SSH HTTP / HTTPs 그리고 API 검색 기술 문자열 인코딩 오픈소스 🤨 Basic Swift 기본문법 Collections ControlFlow(while, for, iterating collection, nested loop) Optional Guard Object Oriented Programing Closures enum Properties & Methods Stored Properties Computed Properties Lazy Properties Computed Properties or Methods? Inheritance Initializers Protocols & Extensions Value vs Reference Types Self Xcode IDE iOS kno…","fields":{"slug":"/iOS-roadmap/"},"frontmatter":{"categories":"iOS","title":"iOS 개발 로드맵 따라가기","date":"January 21, 2022"}},"next":{"fields":{"slug":"/UX-Jacobs-Law/"}},"previous":{"fields":{"slug":"/CS-cpu-core-thread/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}